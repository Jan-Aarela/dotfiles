#!/bin/bash
# vi:foldmethod=marker
# Read before executing.

# Configs {{{
CONFIGS=(
  "hypr"
  "i3"
  "cava"
  "broot"
  "zathura"
  "fish"
  "nvim"
  "wofi"
  "picom.conf"
  "scripts"
)

# Preselect all configs
SELECTED_CONFIGS=("${CONFIGS[@]}")
# }}}

# Disclaimer {{{
echo -e "\033[33mYou are about to execute a script that \033[43;30m WILL OVERWRITE \033[0m\033[33m current files in ~/.config! 
Please, inspect this script with the text editor of your choice before execution.

Keep in mind, config files such as monitor settings, keybinds, ENVs...
are preconfigured for author's device.
So, if you suddenly get a \033[43;30m BLACK SCREEN \033[0m\033[33m, now you know why.\033[0m"
# }}}

# Functions for menu {{{

# List selected configs
list_selected_configs() {
  echo -e "\n\033[34mSelected config files:\033[0m"

  for CONFIG in "${CONFIGS[@]}"; do
    if [[ " ${SELECTED_CONFIGS[@]} " == *" ${CONFIG} "* ]]; then
      echo -e "[x] $CONFIG"
    else
      echo -e "[ ] $CONFIG"
    fi
  done
}

remove_config() {
  echo -n -e "\033[0m"
  read -p "Remove: " -r REPLY
  for i in "${!SELECTED_CONFIGS[@]}"; do
    # Check if the value at the current index matches the target
    if [[ "${SELECTED_CONFIGS[$i]}" == "$REPLY" ]]; then
      unset 'SELECTED_CONFIGS[i]'
      break
    fi
  done
}

add_config() {
  echo -n -e "\033[0m"
  read -p "${GREEN}Add: " -r REPLY

  # Check if a config is available
  for CONFIG in "${CONFIGS[@]}"; do
    if [[ "$CONFIG" == "$REPLY" ]]; then
      AVAILABLE=TRUE
      break
    fi
  done

  if [[ $AVAILABLE == "TRUE" ]]; then

    # Check if it's already selected
    for CONFIG in "${SELECTED_CONFIGS[@]}"; do
      if [[ "$CONFIG" == "$REPLY" ]]; then
        MATCH=FOUND
        break
      fi
    done

    # If not, add it.
    if [[ $MATCH != "FOUND" ]]; then
      SELECTED_CONFIGS+=("$REPLY")
    fi
  fi
}
# }}}

# Interactive menu {{{
list_selected_configs
while true; do
  echo -e "\033[33m"
  read -p "What to do?: [I]nstall [A]dd [R]emove [L]ist [Q]uit: " -r REPLY

  if [[ $REPLY =~ ^[Qq]$ ]]; then
    echo -e "\n\033[41;30mCONFIGURATION ABORTED"
    exit 1
  elif [[ $REPLY =~ ^[Ll]$ ]]; then
    list_selected_configs

  elif [[ $REPLY =~ ^[Aa]$ ]]; then
    add_config

  elif [[ $REPLY =~ ^[Rr]$ ]]; then
    remove_config

  # For testing purposes
  elif [[ $REPLY =~ ^[Tt]$ ]]; then
    echo "${SELECTED_CONFIGS[@]}"

  elif [[ $REPLY =~ ^[Ii]$ ]]; then
    echo -e "\033[31m"
    read -p "Do you wish to install selected configs? [y/N]: " -r REPLY

    if [[ $REPLY =~ ^[Yy]$ ]]; then
      echo -e "\033[0mInstalling!"
      break
    else
      echo -e "\033[0mCancelled!"
    fi
  else
    echo -e "\033[0mNot an option"
  fi
done

echo
# }}}

# Execution {{{
# Countdown
i=3
while [ $i -gt 0 ]; do
  echo -e "\033[31mStarting in... $i\033[0m"
  sleep 1
  i=$((i - 1))
done
echo -e "\033[41;30mCONFIGURATION STARTED!\033[0m"

# Get dotfiles location
DOTFILES=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
echo -e "\n\033[34mDotfiles location:\033[0m\n$DOTFILES"

# Makes scripts executable
chmod -R +x "$DOTFILES"/scripts/*
echo -e "\n\033[34mScripts now executable:\033[0m\n$DOTFILES/hypr/scripts/"

# Unlink configs
COUNT=0
echo -e "\n\033[34mSymlinks removed:\033[0m"
for CONFIG in "${SELECTED_CONFIGS[@]}"; do
  if [ -h ~/.config/"$CONFIG" ]; then
    echo "~/.config/"$CONFIG"@"
    unlink ~/.config/"$CONFIG"
    COUNT=$((COUNT + 1))
  fi
done
if [[ $COUNT == 0 ]]; then
  echo "No existing symlinks"
fi

# Create backups
COUNT=0
echo -e "\n\033[34mBackups created:\033[0m"
for CONFIG in "${SELECTED_CONFIGS[@]}"; do
  if [[ -f ~/.config/"$CONFIG" || -d ~/.config/"$CONFIG" ]]; then
    echo "~/.config/"$CONFIG".bkz"
    rm -rf ~/.config/"$CONFIG".bkz
    mv ~/.config/"$CONFIG" ~/.config/"$CONFIG".bkz
    COUNT=$((COUNT + 1))
  fi
done
if [[ $COUNT == 0 ]]; then
  echo "No existing directories or files"
fi

# Create symlinks
echo -e "\n\033[34mSymlinks created:\033[0m"
for CONFIG in "${SELECTED_CONFIGS[@]}"; do
  echo "~/.config/"$CONFIG"@ -> $DOTFILES/$CONFIG"
  ln -s "$DOTFILES"/"$CONFIG" ~/.config/
done

echo -e "\n\033[42;30mCONFIGURATION COMPLETED!\033[0m"
# }}}
